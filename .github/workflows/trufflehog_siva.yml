name: TruffleHog PR Scan - by Siva

on:
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  trufflehog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run TruffleHog GitHub Action
        id: trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --json > trufflehog_results.json

      - name: Comment on PR with TruffleHog results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'trufflehog_results.json';

            let body = '## 🔐 TruffleHog Secret Scan Results\n';

            if (!fs.existsSync(path) || fs.readFileSync(path, 'utf8').trim() === '') {
              body += `✅ No secrets found.\n`;
            } else {
              const lines = fs.readFileSync(path, 'utf8').trim().split('\n');
              const findings = lines.map(line => {
                try { return JSON.parse(line); } catch { return null; }
              }).filter(f => f && f.SourceMetadata);

              if (findings.length === 0) {
                body += `✅ No secrets found.\n`;
              } else {
                body += `| File | Line | Detector | Redacted Secret |\n`;
                body += `|------|------|----------|-----------------|\n`;
                for (const f of findings) {
                  const file = f.SourceMetadata?.Data || 'N/A';
                  const line = f.SourceMetadata?.LineNumber || 'N/A';
                  const detector = f.DecodedReason || 'Unknown';
                  const redacted = f.Redacted || '***';
                  body += `| \`${file}\` | ${line} | ${detector} | \`${redacted}\` |\n`;
                }
              }
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
